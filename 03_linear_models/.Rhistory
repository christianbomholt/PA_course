normalize <- function(x){
return ((x-min(x))/(max(x)-min(x)))
}
iris<-iris %>% mutate_at(vars(Sepal.Length:Petal.Width), normalize)
data.table::data.table(iris %>% head)
result<- kmeans(iris %>% select(-c(Species)),3)
result$centers
iris$pred <- result$cluster
result$cluster
iris %>% select(Species) %>% unique()
mapping         <- table(result$cluster,iris$Species) %>% apply(.,2,which.max)
mapping_df      <- data.frame(Species=mapping %>% names,label = mapping %>% as.numeric())
mapping_df_rev  <- data.frame(Classpred=mapping %>% names,pred = mapping %>% as.numeric())
iris
iris<-iris %>% inner_join(mapping_df,by = "Species") %>%
inner_join(mapping_df_rev,by = "pred") %>%
mutate(term = recode(Species,
"setosa" = "circle",
"versicolor" = "cross",
"virginica" = "diamond")) %>%
mutate(correctness = if_else(label==pred,"circle","cross"))
iris
p1 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width, symbol = ~Classpred, size=~Sepal.Width)
p2 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width)
subplot(p1, p2)
p2 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width, showscale=FALSE )
p1 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width,
symbol = ~Classpred, size=~Sepal.Width, showscale=FALSE )
p2 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width, showscale=FALSE )
subplot(p1, p2) %>%
p1 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width,
symbol = ~Classpred, size=~Sepal.Width, showscale=FALSE )
p2 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width, showscale=FALSE )
p1 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width,
symbol = ~Classpred, size=~Sepal.Width, showscale=FALSE )
p2 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width, showscale=FALSE )
subplot(p1, p2)
subplot(p1, p2, showscale=FALSE)
p1 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width,
symbol = ~Classpred, size=~Sepal.Width, showscale=FALSE )
p2 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width, showscale=FALSE )
subplot(p1, p2, showscale=FALSE)
subplot(p1, p2) %>% layout(showscale = FALSE)
p1 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width,
symbol = ~Classpred, size=~Sepal.Width, showscale=FALSE ) %>% layout(showscale = FALSE)
p2 <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
color = ~Petal.Width, symbol = ~Species, size=~Sepal.Width, showscale=FALSE ) %>% layout(showscale = FALSE)
subplot(p1, p2) %>% layout(showscale = FALSE)
subplot(p1, p2) %>% layout(showscale = FALSE,showlegend = FALSE)
plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length, color = ~Petal.Width,
symbol = ~correctness, size=~Sepal.Width)
550*1.06
540*1.0192
540*(1+ 0.0192 + 0.0375 + 0.1125)
41.2*(1+ 0.0192 + 0.0375 + 0.1125)
12*41.2*(1+ 0.0192 + 0.0375 + 0.1125)
550*1.06
550*1.06/12
30*1.18
41.2*(1+ 0.0192 + 0.0375 + 0.1125)
550*1.06/12
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = False)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(plotly))
suppressPackageStartupMessages(library(pacman))
suppressPackageStartupMessages(library(readxl))
df <- read_excel('R.xlsx',col_names = T)
df$Date <- as.Date(df$Date,origin = '1970-01-01')
DT::datatable(df %>% subset(select=c(Date,Yield,CDS,CA,Forwards,NDF))
%>% head(6), options = list(dom='t'),rownames = F)
library(plotly)
p <- df %>%
tidyr::gather(variable, value, -Date) %>%
transform(id = as.integer(factor(variable))) %>%
plot_ly(x = ~Date, y = ~value, color = ~variable, colors = "Dark2",
yaxis = ~paste0("y", id)) %>%
add_lines() %>%
subplot(nrows = 5, shareX = TRUE)
p
library(dplyr)
df <- df %>%
mutate(lag1=lag(Yield),
lag2=lag(Yield,2),
movave=(lag1+lag2)/2)
df[is.na(df)] <- 7
install.packages("glmnet")
library(glmnet)
#
names_s <- c('tilbagevendende tanker eller erindringer om begivenheden',
'Føler i glimt, at det er ligesom om at begivenheden gentager sig',
'Gentagne mareridt om begivenheden',
'Pludselige følelsesladede eller fysiske reaktioner, når jeg bliver mindet om begivenheden',
'undgår aktiviteter der minder om begivenheden',
'undgår tanker eller følelser forbundet med begivenheden',
'bliver nemt forskrækket',
'Følelsen af at være på vagt'
)
#
names_s <- c('tilbagevendende tanker eller erindringer om begivenheden',
'Føler i glimt, at det er ligesom om at begivenheden gentager sig',
'Gentagne mareridt om begivenheden',
'Pludselige følelsesladede eller fysiske reaktioner, når jeg bliver mindet om begivenheden',
'undgår aktiviteter der minder om begivenheden',
'undgår tanker eller følelser forbundet med begivenheden',
'bliver nemt forskrækket',
'Følelsen af at være på vagt'
)
# Første rating:
# 1. 4
# 2. 3
# 3. 3
# 4. 4
# 5. 4
# 6. 4
# 7. 4
# 8. 3
t_1 <- c(4,3,3,4,4,4,4,3)
# Anden rating:
#   1. 3
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
t_2 <- c(3,3,3,3,3,3,4,3)
# Tredje rating:
#   1. 4
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
t_3 <- c(4,3,3,3,3,3,4,3)
# Fjerde rating:
#   1. 3
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
t_4 <- c(3,3,3,3,3,3,4,3)
matrx <- matrix(t_1,t_2t_3,t_4)
# df <- data.frame(
#   c()
# )
matrx <- matrix(t_1,t_2,t_3,t_4)
matrx <- cbind(t_1,t_2,t_3,t_4)
matrx
# Fjerde rating:
#   1. 3
# 2. 3
# 3. 3
# 4. 3
# 5. 3
# 6. 3
# 7. 4
# 8. 3
library(dplyr)
library(highcharter)
matrx %>% t()
matrx <-cbind(t_1,t_2,t_3,t_4)
df <-as.data.frame(matrx %>% t())
df
df <-as.data.frame(matrx %>% t()) %>% mutate(time = rownames(.))
df
df <-as.data.frame(matrx %>% t())
colnames(df) <- names_s
df <- df %>% mutate(time = rownames(.))
df
?gather
df <- df %>% gather(cat,rating,-time)
df <- df %>% tidyr::gather(cat,rating,-time)
df
?hcahrt
?hchart
?hcaes
hchart(df, hcaes(x=time,y=rating,group=cat))
hchart(df, type = scatter, hcaes(x=time,y=rating,group=cat))
hchart(df, type = 'scatter', hcaes(x=time,y=rating,group=cat))
p <- df %>%
transform(id = as.integer(factor(cat))) %>%
plot_ly(x = ~time, y = ~rating, color = ~cat, colors = "Dark2",
yaxis = ~paste0("y", id)) %>%
add_lines() %>%
subplot(nrows = 5, shareX = TRUE)
library(plotly)
p <- df %>%
transform(id = as.integer(factor(cat))) %>%
plot_ly(x = ~time, y = ~rating, color = ~cat, colors = "Dark2",
yaxis = ~paste0("y", id)) %>%
add_lines() %>%
subplot(nrows = 5, shareX = TRUE)
p
shiny::runApp('R/r_scripts/bday')
library(shiny)
runApp('R/r_scripts/bday')
runApp('R/r_scripts/bday')
runApp('R/r_scripts/bday')
library(markdown)
ls()
plot(1:10,1:10)
x <- 1:10
y <- x²
plot(x,y)
y <- x^2
plot(x,y)
x <- 1:10
y <- x^2
plot(x,y)
x <- 1:10
source('~/.active-rstudio-document', echo=TRUE)
x <- 1:10
y <- x^2
plot(x,y)
df <- mtcars
View(df)
?mean
?mutate
??mutate
install.packages("ggplot2")
diamonds
library(ggplot2)
diamonds
library(dbplyr)
library(dplyr)
mutate(diamonds, price_pr_carat = price / carat)
?dplyr
data<- read_excel("R/couse_oct/data/xl/haver.xlsx")
data
read_excel("R/couse_oct/data/xl/haver.xlsx")
library(readxl)
data<- read_excel("R/couse_oct/data/xl/haver.xlsx")
data
data<- read_excel("R/couse_oct/data/xl/haver.xlsx",skip=1)
data
data<- read_excel("R/couse_oct/data/xl/haver.xlsx",skip=1 , na = "#N/A")
data
View(data)
library(readr)
path <- "R/couse_oct/data/exercise.csv"
read_csv(path)
read_csv(path, na = "#NNAA")
data <- read_csv(path, na = "#NNAA")
data$Date <- as.Date(data$Date)
data
data <- read_csv(path, na = "#NNAA")
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data
data <- read_csv(path, na = "#NNAA")
data
library(feather)
library(data.table)
library(fst)
library(readr)
nr_of_rows <- 1e6
df <- data.frame(
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
)
timer <- function(expr){
res <- system.time(expr)
as.numeric(res[3]) #%>% round(9)
}
# fst
fstwrite <- timer(write.fst(df, "dataset.fst"))
fstread  <- timer(read.fst("dataset.fst"))
#fread
dtwrite <- timer(fwrite(df, "dataset.csv"))
dtread  <- timer(fread("dataset.csv"))
#base
basewrite <- timer(write_rds(df, "dataset.rds"))
baseread  <- timer(read_rds("dataset.rds"))
#feather
featherwrite <- timer(write_feather(df, "dataset.feather"))
featherread  <- timer(read_feather("dataset.feather"))
(write_df <- data.frame(base = basewrite,
datatable = dtwrite,
fst = fstwrite,
feather = featherwrite))
(read_df <- data.frame(base = baseread,
datatable = dtread,
fst = fstread,
feather = featherread))
library(highcharter)
hchart(write_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Write time in S for 1.000.000 rows"))
library(feather)
library(data.table)
library(fst)
library(readr)
# The first two entries are the total user and system CPU
# times of the current R process and any child processes on
# which it has waited, and the third entry is the ‘real’ elapsed time since the process was started.
#
# The definition of ‘user’ and ‘system’ times is from your OS.
# Typically it is something like The ‘user time’ is the CPU time
# charged for the execution of user instructions of the calling process.
# The ‘system time’ is the CPU time charged for execution by the system on behalf of the calling process.
nr_of_rows <- 1e6
library(tidyr)
df <- data.frame(
Logical = sample(c(TRUE, FALSE, NA), prob = c(0.85, 0.1, 0.05), nr_of_rows, replace = TRUE),
Integer = sample(1L:100L, nr_of_rows, replace = TRUE),
Real = sample(sample(1:10000, 20) / 100, nr_of_rows, replace = TRUE),
Factor = as.factor(sample(labels(UScitiesD), nr_of_rows, replace = TRUE))
)
timer <- function(expr){
res <- system.time(expr)
as.numeric(res[3]) #%>% round(9)
}
# fst
fstwrite <- timer(write.fst(df, "dataset.fst"))
fstread  <- timer(read.fst("dataset.fst"))
#fread
dtwrite <- timer(fwrite(df, "dataset.csv"))
dtread  <- timer(fread("dataset.csv"))
#base
basewrite <- timer(write_rds(df, "dataset.rds"))
baseread  <- timer(read_rds("dataset.rds"))
#feather
featherwrite <- timer(write_feather(df, "dataset.feather"))
featherread  <- timer(read_feather("dataset.feather"))
(write_df <- data.frame(base = basewrite,
datatable = dtwrite,
fst = fstwrite,
feather = featherwrite))
(read_df <- data.frame(base = baseread,
datatable = dtread,
fst = fstread,
feather = featherread))
library(highcharter)
hchart(write_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Write time in S for 1.000.000 rows"))
hchart(read_df %>% gather %>% arrange(value), "column", hcaes(x = key, y = value)) %>%
hc_xAxis(title = list(text = "Package name")) %>%
hc_yAxis(title = list(text = "Read time in S for 1.000.000 rows"))
read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
colnames(d)
d<- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
colnames(d)
d$genres %>% unique
View(d)
View(d)
movies <- read_csv("R/couse_oct/data/tmdb_5000_movies.csv")
library(readxl)
library(dplyr)
library(glmnet)
df <- read_excel('../data/xl/R.xlsx',col_names = T)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
library(readxl)
library(dplyr)
library(glmnet)
df <- read_excel('../data/xl/R.xlsx',col_names = T)
df$Date <- as.Date(df$Date,origin = '1970-01-01')
train <- df %>% filter(Date<'2013-01-01')
test <- df %>% filter(Date>='2013-01')
test <- df %>% filter(Date>='2013-01-01')
X <- train %>% select(-c(Date,Yield))
train %>% select(-c(Date,Yield))
train %>% select(-c(Date,Yield)) %>% as.matrix()
y <- train$Yield
fit <- glmnet(X,y)
X <- train %>% select(-c(Date,Yield)) %>% as.matrix()
y <- train$Yield
fit <- glmnet(X,y)
X_test <- test %>% select(-c(Date,Yield)) %>% as.matrix()
predictions <- predict(fit,X_test)
sum(abs(predictions - test$Yield))
sum(abs(predictions[,2] - test$Yield))
sum(abs(predictions[,40] - test$Yield))
fit <- cv.glmnet(X,y)
predictions <- predict(fit,X_test)
sum(abs(predictions - test$Yield))
library(readr)
pwi=read_csv("../data/brain/pwi.csv",col_names = FALSE)
pwi = as.matrix(pwi)
dwi=read_csv("../data/brain/dwi.csv", col_names=FALSE)
dwi = as.matrix(dwi)
mask=read_csv("../data/brain/mask.csv", col_names=FALSE)
mask = as.matrix(mask)
pwi
dwi
mask
mask = as.matrix(mask)
par(mfrow=c(1,2))
image(pwi,col=gray(seq(0,1,length=100)))
image(dwi,col=gray(seq(0,1,length=100)))
mdwi <-dwi
mdwi[mdwi<0]<-0
library(plotly)
p1<-plot_ly(z=~mdwi, type = "contour")
p2<-plot_ly(z=~pwi, type = "contour")
subplot(p1,p2) %>% layout(title = "Lesion core, high DWI, high MTT")
N = sum(mask==1)
Y = matrix(0, nrow=N, ncol=2)
Y[,1] = pwi[mask==1]
Y[,2] = dwi[mask==1]
W = rep(0,8)
V = W
for (i in 2:9){
km = kmeans(Y,i)
W[i-1]=sum(km$withinss)
V[i-1] <- round(km$betweenss / km$totss,5)
}
plot(2:9,W, type = 'l')
plot(2:9,V, type = 'l')
K=3
km = kmeans(Y,K)
segmented = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented[mask==1]=km$cluster
p1<-plot_ly(z=~segmented, type = "contour")
plot_ly(z=~segmented, type = "contour")
p1<-plot_ly(z=~segmented, type = "contour")
Y.scaled = scale(Y)
km = kmeans(Y.scaled,K)
segmented1 = matrix(0, ncol=ncol(pwi), nrow=nrow(pwi))
segmented1[mask==1]=km$cluster
p2<-plot_ly(z=~segmented1, type = "contour")
subplot(p1,p2) %>% layout(title = "Importance of scaling")
require(mvtnorm)       # For multivariate Gaussian density
pi.est = rep(1,K)/K
rho = matrix(0,nrow=N,ncol=K)
init.id = sample(1:N,K)
mu = Y[init.id,]
sigma = array(0,c(K, dim(Y)[2], dim(Y)[2]))
for (k in 1:K) sigma[k,,]=cov(Y)
for (iter in 1:20){
print(iter)
# Calculate the N responsibilities
for (i in 1:N){
for (j in 1:K){
rho[i,j] = pi.est[j]*dmvnorm(Y[i,],mu[j,],sigma[j,,])
}
rho[i,] = rho[i,] / sum(rho[i,])
}
# Update parameters
for (j in 1:K){
mu[j,] = colSums(Y*rho[,j]) / sum(rho[,j])
}
for (j in 1:K){
sigma.tmp = 0
for (i in 1:N){
sigma.tmp = sigma.tmp + rho[i,j] * (Y[i,]-mu[j,])%*%t((Y[i,]-mu[j,]))
}
sigma[j,,] = sigma.tmp / sum(rho[,j])
}
for (j in 1:K){
pi.est[j] = sum(rho[,j]) / N
}
}
img_er <- function(k){
probclass = matrix(0, nrow=nrow(pwi), ncol=ncol(pwi))
probclass[mask==1]=rho[,k]
return(plot_ly(z=~probclass, type = "contour"))
}
subplot(img_er(1),img_er(2),img_er(3))
library(rpart)
library(visNetwork)
# Basic classification tree
res <- rpart(Species~., data=iris, control = rpart.control(cp = 0.15))
res
visTree(res, main = "Iris classification Tree", width = "100%")
?rpart
res <- rpart(Petal.Length~., data=iris)
visTree(res, edgesFontSize = 14, nodesFontSize = 16, width = "100%")
data("solder")
res <- rpart(Opening~., data = solder, control = rpart.control(cp = 0.00005))
visTree(res, height = "800px", nodesPopSize = TRUE, minNodeSize = 10,
maxNodeSize = 30, width = "100%")
df <- ggplot2::diamonds %>% mutate(value = if_else(price >= 4000,  "high", "low"))
df <- df %>% mutate(id = row_number())
#Check IDs
head(df$id)
#Create training set
train <- df %>% sample_frac(.70)
#Create test set
test  <- anti_join(df, train, by = 'id')
rpart(value ~ cut + carat + color + clarity,
data = train,
control = rpart.control(maxDepth = 4))
dt1 <- rpart(value ~ cut + carat + color + clarity,
data = train)
visTree(dt1)
# Prune the tree to remove unnecessary complexity from the model
dt2 <- prune(dt1, cp=0.1)
dt1 <- rpart(value ~ cut + carat + color + clarity,
data = train)
visTree(dt1)
rpart(value ~ cut + carat + color + clarity,
data = train,
control = rpart.control(cp = 0.001))
dt1 <- rpart(value ~ cut + carat + color + clarity,
data = train, control = rpart.control(cp = 0.001))
visTree(dt1)
